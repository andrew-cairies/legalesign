//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//
// The supplied json has fields with names that are not valid in apex
// and so can only be parsed with explicitly generated code, this option
// was auto selected for you.

public class GetTemplateResponseJSON {

	public class Meta {
		public Integer limit_Z {get;set;} // in json: limit
		public Integer next {get;set;} 
		public Integer offset {get;set;} 
		public Integer previous {get;set;} 
		public Integer total_count {get;set;} 

		public Meta(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'limit') {
							limit_Z = parser.getIntegerValue();
						} else if (text == 'next') {
							next = parser.getIntegerValue();
						} else if (text == 'offset') {
							offset = parser.getIntegerValue();
						} else if (text == 'previous') {
							previous = parser.getIntegerValue();
						} else if (text == 'total_count') {
							total_count = parser.getIntegerValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Meta consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Templates {
		public Boolean archive_upon_send {get;set;} 
		public String created {get;set;} 
		public String group_Z {get;set;} // in json: group
		public String modified {get;set;} 
		public Integer page_count {get;set;} 
		public String resource_uri {get;set;} 
		public Integer signer_count {get;set;} 
		public String title {get;set;} 
		public String user {get;set;} 
		public String uuid {get;set;} 
		public Boolean valid {get;set;} 

		public Templates(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'archive_upon_send') {
							archive_upon_send = parser.getBooleanValue();
						} else if (text == 'created') {
							created = parser.getText();
						} else if (text == 'group') {
							group_Z = parser.getText();
						} else if (text == 'modified') {
							modified = parser.getText();
						} else if (text == 'page_count') {
							page_count = parser.getIntegerValue();
						} else if (text == 'resource_uri') {
							resource_uri = parser.getText();
						} else if (text == 'signer_count') {
							signer_count = parser.getIntegerValue();
						} else if (text == 'title') {
							title = parser.getText();
						} else if (text == 'user') {
							user = parser.getText();
						} else if (text == 'uuid') {
							uuid = parser.getText();
						} else if (text == 'valid') {
							valid = parser.getBooleanValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Objects consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public Meta meta {get;set;} 
	public static List<Templates> templateList = new List<Templates>();
    public static List<Templates> getTemplateList() {
        return templateList;
    }

	public GetTemplateResponseJSON(JSONParser parser) {
		while (parser.nextToken() != System.JSONToken.END_OBJECT) {
			if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
				String text = parser.getText();
				if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
					if (text == 'meta') {
						meta = new Meta(parser);
					} else if (text == 'objects') {
						templateList = arrayOfObjects(parser);
					} else {
						System.debug(LoggingLevel.WARN, 'GetTemplateResponseJSON consuming unrecognized property: '+text);
						consumeObject(parser);
					}
				}
			}
		}
	}
	
	
	public static GetTemplateResponseJSON parse(String json) {
		System.JSONParser parser = System.JSON.createParser(json);
		return new GetTemplateResponseJSON(parser);
	}
	
	public static void consumeObject(System.JSONParser parser) {
		Integer depth = 0;
		do {
			System.JSONToken curr = parser.getCurrentToken();
			if (curr == System.JSONToken.START_OBJECT || 
				curr == System.JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == System.JSONToken.END_OBJECT ||
				curr == System.JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	}
	






    private static List<Templates> arrayOfObjects(System.JSONParser p) {
        List<Templates> res = new List<Templates>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Templates(p));
        }
        return res;
    }



}