//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//
// The supplied json has fields with names that are not valid in apex
// and so can only be parsed with explicitly generated code, this option
// was auto selected for you.

public class GetTemplateFieldsResponseJSON {

	public class Meta {
		public Integer limit_Z {get;set;} // in json: limit
		public Integer next {get;set;} 
		public Integer offset {get;set;} 
		public Integer previous {get;set;} 
		public Integer total_count {get;set;} 

		public Meta(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'limit') {
							limit_Z = parser.getIntegerValue();
						} else if (text == 'next') {
							next = parser.getIntegerValue();
						} else if (text == 'offset') {
							offset = parser.getIntegerValue();
						} else if (text == 'previous') {
							previous = parser.getIntegerValue();
						} else if (text == 'total_count') {
							total_count = parser.getIntegerValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Meta consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Fields {
		public String align {get;set;} 
		public Double ax {get;set;} 
		public Double ay {get;set;} 
		public Double bx {get;set;} 
		public Double by_Z {get;set;} // in json: by
		public String element_type {get;set;} 
		public String fieldorder {get;set;} 
		public String font_name {get;set;} 
		public Integer font_size {get;set;} 
		public Boolean hide_border {get;set;} 
		public String label {get;set;} 
		public String label_extra {get;set;} 
		public String logic_action {get;set;} 
		public String logic_group {get;set;} 
		public String map_to {get;set;} 
		public Boolean optional {get;set;} 
		public String options {get;set;} 
		public Integer page {get;set;} 
		public Integer signer {get;set;} 
		public Boolean substantive {get;set;} 
		public String validation {get;set;} 
		public String value {get;set;} 

		public Fields(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'align') {
							align = parser.getText();
						} else if (text == 'ax') {
							ax = parser.getDoubleValue();
						} else if (text == 'ay') {
							ay = parser.getDoubleValue();
						} else if (text == 'bx') {
							bx = parser.getDoubleValue();
						} else if (text == 'by') {
							by_Z = parser.getDoubleValue();
						} else if (text == 'element_type') {
							element_type = parser.getText();
						} else if (text == 'fieldorder') {
							fieldorder = parser.getText();
						} else if (text == 'font_name') {
							font_name = parser.getText();
						} else if (text == 'font_size') {
							font_size = parser.getIntegerValue();
						} else if (text == 'hide_border') {
							hide_border = parser.getBooleanValue();
						} else if (text == 'label') {
							label = parser.getText();
						} else if (text == 'label_extra') {
							label_extra = parser.getText();
						} else if (text == 'logic_action') {
							logic_action = parser.getText();
						} else if (text == 'logic_group') {
							logic_group = parser.getText();
						} else if (text == 'map_to') {
							map_to = parser.getText();
						} else if (text == 'optional') {
							optional = parser.getBooleanValue();
						} else if (text == 'options') {
							options = parser.getText();
						} else if (text == 'page') {
							page = parser.getIntegerValue();
						} else if (text == 'signer') {
							signer = parser.getIntegerValue();
						} else if (text == 'substantive') {
							substantive = parser.getBooleanValue();
						} else if (text == 'validation') {
							validation = parser.getText();
						} else if (text == 'value') {
							value = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Objects consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public Meta meta {get;set;} 
	public static List<Fields> fieldsList = new List<Fields>();
	public static List<Fields> getFieldsList() {
		return fieldsList;
	}

	public GetTemplateFieldsResponseJSON(JSONParser parser) {
		while (parser.nextToken() != System.JSONToken.END_OBJECT) {
			if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
				String text = parser.getText();
				if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
					if (text == 'meta') {
						meta = new Meta(parser);
					} else if (text == 'objects') {
						fieldsList = arrayOfObjects(parser);
					} else {
						System.debug(LoggingLevel.WARN, 'GetTemplateFieldsResponseJSON consuming unrecognized property: '+text);
						consumeObject(parser);
					}
				}
			}
		}
	}
	
	
	public static GetTemplateFieldsResponseJSON parse(String json) {
		System.JSONParser parser = System.JSON.createParser(json);
		return new GetTemplateFieldsResponseJSON(parser);
	}
	
	public static void consumeObject(System.JSONParser parser) {
		Integer depth = 0;
		do {
			System.JSONToken curr = parser.getCurrentToken();
			if (curr == System.JSONToken.START_OBJECT || 
				curr == System.JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == System.JSONToken.END_OBJECT ||
				curr == System.JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	}
	






    private static List<Fields> arrayOfObjects(System.JSONParser p) {
        List<Fields> res = new List<Fields>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Fields(p));
        }
        return res;
    }






}